// Generated by gencpp from file yhs_msgs/DynamicParams.msg
// DO NOT EDIT!


#ifndef YHS_MSGS_MESSAGE_DYNAMICPARAMS_H
#define YHS_MSGS_MESSAGE_DYNAMICPARAMS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace yhs_msgs
{
template <class ContainerAllocator>
struct DynamicParams_
{
  typedef DynamicParams_<ContainerAllocator> Type;

  DynamicParams_()
    : header()
    , graph_follow_max_speed(0.0)
    , record_follow_max_speed(0.0)
    , goal_follow_max_speed(0.0)
    , graph_void_obstacle(false)
    , record_void_obstacle(false)
    , lidar_void_obstacle(false)
    , ultrasonic1_void_obstacle(false)
    , ultrasonic2_void_obstacle(false)
    , ultrasonic3_void_obstacle(false)
    , ultrasonic4_void_obstacle(false)
    , ultrasonic5_void_obstacle(false)
    , ultrasonic6_void_obstacle(false)
    , ultrasonic7_void_obstacle(false)
    , ultrasonic8_void_obstacle(false)
    , camera1_void_obstacle(false)
    , camera2_void_obstacle(false)  {
    }
  DynamicParams_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , graph_follow_max_speed(0.0)
    , record_follow_max_speed(0.0)
    , goal_follow_max_speed(0.0)
    , graph_void_obstacle(false)
    , record_void_obstacle(false)
    , lidar_void_obstacle(false)
    , ultrasonic1_void_obstacle(false)
    , ultrasonic2_void_obstacle(false)
    , ultrasonic3_void_obstacle(false)
    , ultrasonic4_void_obstacle(false)
    , ultrasonic5_void_obstacle(false)
    , ultrasonic6_void_obstacle(false)
    , ultrasonic7_void_obstacle(false)
    , ultrasonic8_void_obstacle(false)
    , camera1_void_obstacle(false)
    , camera2_void_obstacle(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _graph_follow_max_speed_type;
  _graph_follow_max_speed_type graph_follow_max_speed;

   typedef float _record_follow_max_speed_type;
  _record_follow_max_speed_type record_follow_max_speed;

   typedef float _goal_follow_max_speed_type;
  _goal_follow_max_speed_type goal_follow_max_speed;

   typedef uint8_t _graph_void_obstacle_type;
  _graph_void_obstacle_type graph_void_obstacle;

   typedef uint8_t _record_void_obstacle_type;
  _record_void_obstacle_type record_void_obstacle;

   typedef uint8_t _lidar_void_obstacle_type;
  _lidar_void_obstacle_type lidar_void_obstacle;

   typedef uint8_t _ultrasonic1_void_obstacle_type;
  _ultrasonic1_void_obstacle_type ultrasonic1_void_obstacle;

   typedef uint8_t _ultrasonic2_void_obstacle_type;
  _ultrasonic2_void_obstacle_type ultrasonic2_void_obstacle;

   typedef uint8_t _ultrasonic3_void_obstacle_type;
  _ultrasonic3_void_obstacle_type ultrasonic3_void_obstacle;

   typedef uint8_t _ultrasonic4_void_obstacle_type;
  _ultrasonic4_void_obstacle_type ultrasonic4_void_obstacle;

   typedef uint8_t _ultrasonic5_void_obstacle_type;
  _ultrasonic5_void_obstacle_type ultrasonic5_void_obstacle;

   typedef uint8_t _ultrasonic6_void_obstacle_type;
  _ultrasonic6_void_obstacle_type ultrasonic6_void_obstacle;

   typedef uint8_t _ultrasonic7_void_obstacle_type;
  _ultrasonic7_void_obstacle_type ultrasonic7_void_obstacle;

   typedef uint8_t _ultrasonic8_void_obstacle_type;
  _ultrasonic8_void_obstacle_type ultrasonic8_void_obstacle;

   typedef uint8_t _camera1_void_obstacle_type;
  _camera1_void_obstacle_type camera1_void_obstacle;

   typedef uint8_t _camera2_void_obstacle_type;
  _camera2_void_obstacle_type camera2_void_obstacle;





  typedef boost::shared_ptr< ::yhs_msgs::DynamicParams_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yhs_msgs::DynamicParams_<ContainerAllocator> const> ConstPtr;

}; // struct DynamicParams_

typedef ::yhs_msgs::DynamicParams_<std::allocator<void> > DynamicParams;

typedef boost::shared_ptr< ::yhs_msgs::DynamicParams > DynamicParamsPtr;
typedef boost::shared_ptr< ::yhs_msgs::DynamicParams const> DynamicParamsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yhs_msgs::DynamicParams_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yhs_msgs::DynamicParams_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace yhs_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'yhs_msgs': ['/home/yhs/ME/src/yhs_bringup/yhs_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::yhs_msgs::DynamicParams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yhs_msgs::DynamicParams_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yhs_msgs::DynamicParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yhs_msgs::DynamicParams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yhs_msgs::DynamicParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yhs_msgs::DynamicParams_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yhs_msgs::DynamicParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "20963dca84ecb5007ff26edc395a0618";
  }

  static const char* value(const ::yhs_msgs::DynamicParams_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x20963dca84ecb500ULL;
  static const uint64_t static_value2 = 0x7ff26edc395a0618ULL;
};

template<class ContainerAllocator>
struct DataType< ::yhs_msgs::DynamicParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yhs_msgs/DynamicParams";
  }

  static const char* value(const ::yhs_msgs::DynamicParams_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yhs_msgs::DynamicParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
\n\
float32 graph_follow_max_speed\n\
float32 record_follow_max_speed  \n\
float32 goal_follow_max_speed\n\
bool graph_void_obstacle\n\
bool record_void_obstacle\n\
bool lidar_void_obstacle  \n\
bool ultrasonic1_void_obstacle\n\
bool ultrasonic2_void_obstacle\n\
bool ultrasonic3_void_obstacle\n\
bool ultrasonic4_void_obstacle\n\
bool ultrasonic5_void_obstacle\n\
bool ultrasonic6_void_obstacle\n\
bool ultrasonic7_void_obstacle\n\
bool ultrasonic8_void_obstacle\n\
bool camera1_void_obstacle\n\
bool camera2_void_obstacle\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::yhs_msgs::DynamicParams_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yhs_msgs::DynamicParams_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.graph_follow_max_speed);
      stream.next(m.record_follow_max_speed);
      stream.next(m.goal_follow_max_speed);
      stream.next(m.graph_void_obstacle);
      stream.next(m.record_void_obstacle);
      stream.next(m.lidar_void_obstacle);
      stream.next(m.ultrasonic1_void_obstacle);
      stream.next(m.ultrasonic2_void_obstacle);
      stream.next(m.ultrasonic3_void_obstacle);
      stream.next(m.ultrasonic4_void_obstacle);
      stream.next(m.ultrasonic5_void_obstacle);
      stream.next(m.ultrasonic6_void_obstacle);
      stream.next(m.ultrasonic7_void_obstacle);
      stream.next(m.ultrasonic8_void_obstacle);
      stream.next(m.camera1_void_obstacle);
      stream.next(m.camera2_void_obstacle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DynamicParams_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yhs_msgs::DynamicParams_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yhs_msgs::DynamicParams_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "graph_follow_max_speed: ";
    Printer<float>::stream(s, indent + "  ", v.graph_follow_max_speed);
    s << indent << "record_follow_max_speed: ";
    Printer<float>::stream(s, indent + "  ", v.record_follow_max_speed);
    s << indent << "goal_follow_max_speed: ";
    Printer<float>::stream(s, indent + "  ", v.goal_follow_max_speed);
    s << indent << "graph_void_obstacle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.graph_void_obstacle);
    s << indent << "record_void_obstacle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.record_void_obstacle);
    s << indent << "lidar_void_obstacle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lidar_void_obstacle);
    s << indent << "ultrasonic1_void_obstacle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ultrasonic1_void_obstacle);
    s << indent << "ultrasonic2_void_obstacle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ultrasonic2_void_obstacle);
    s << indent << "ultrasonic3_void_obstacle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ultrasonic3_void_obstacle);
    s << indent << "ultrasonic4_void_obstacle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ultrasonic4_void_obstacle);
    s << indent << "ultrasonic5_void_obstacle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ultrasonic5_void_obstacle);
    s << indent << "ultrasonic6_void_obstacle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ultrasonic6_void_obstacle);
    s << indent << "ultrasonic7_void_obstacle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ultrasonic7_void_obstacle);
    s << indent << "ultrasonic8_void_obstacle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ultrasonic8_void_obstacle);
    s << indent << "camera1_void_obstacle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.camera1_void_obstacle);
    s << indent << "camera2_void_obstacle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.camera2_void_obstacle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YHS_MSGS_MESSAGE_DYNAMICPARAMS_H
